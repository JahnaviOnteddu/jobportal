pipeline {
    agent any

    environment {
        DOCKERHUB_REPO_FE = 'jobportal-frontend'
        DOCKERHUB_REPO_BE = 'jobportal-backend'
        AWS_REGION = 'us-east-2'
    }

    tools {
        maven 'maven'          // Jenkins tool name for Maven (e.g., Maven-3.9)
        nodejs 'npm'           // Jenkins tool name for Node.js (e.g., NodeJS-22)
    }

    stages {

        stage('Checkout') {
            steps {
                git branch: 'main', url: 'https://github.com/JahnaviOnteddu/jobportal.git'
            }
        }

        stage('Build Backend') {
            steps {
                dir('jobportal-backend') {
                    bat 'mvn clean package -DskipTests'
                }
            }
        }

        stage('Build Frontend') {
            steps {
                dir('jobportal-frontend') {
                    bat 'npm install'
                    bat 'npm run build -- --configuration production'
                }
            }
        }

        stage('Docker Build & Push') {
            steps {
                script {
                    def VERSION = new Date().format("yyyyMMddHHmmss")
                    env.IMAGE_BE = "${DOCKERHUB_REPO_BE}:${VERSION}"
                    env.IMAGE_FE = "${DOCKERHUB_REPO_FE}:${VERSION}"
                    env.LATEST_BE = "${DOCKERHUB_REPO_BE}:latest"
                    env.LATEST_FE = "${DOCKERHUB_REPO_FE}:latest"

                    withCredentials([usernamePassword(credentialsId: 'DOCKERHUB-CREDENTIALS',
                                                      usernameVariable: 'DOCKERHUB_USER',
                                                      passwordVariable: 'DOCKERHUB_PASS')]) {

                        bat """
                        echo ${DOCKERHUB_PASS} | docker login -u ${DOCKERHUB_USER} --password-stdin

                        docker build -t ${DOCKERHUB_USER}/${IMAGE_BE} jobportal-backend
                        docker build -t ${DOCKERHUB_USER}/${IMAGE_FE} jobportal-frontend

                        docker push ${DOCKERHUB_USER}/${IMAGE_BE}
                        docker push ${DOCKERHUB_USER}/${IMAGE_FE}

                        docker tag ${DOCKERHUB_USER}/${IMAGE_BE} ${DOCKERHUB_USER}/${LATEST_BE}
                        docker tag ${DOCKERHUB_USER}/${IMAGE_FE} ${DOCKERHUB_USER}/${LATEST_FE}

                        docker push ${DOCKERHUB_USER}/${LATEST_BE}
                        docker push ${DOCKERHUB_USER}/${LATEST_FE}
                        """
                    }
                }
            }
        }

        stage('Terraform Apply') {
            steps {
                withCredentials([[$class: 'AmazonWebServicesCredentialsBinding',
                                  credentialsId: 'AWS-CREDENTIALS']]) {
                    dir('jobportal-infra') {
                        bat 'terraform init'
                        bat 'terraform apply -auto-approve'
                    }
                }
            }
        }

        stage('Deploy to EC2') {
            steps {
                withCredentials([sshUserPrivateKey(credentialsId: 'PEM', keyFileVariable: 'KEYFILE')]) {
                    script {
                        dir('jobportal-infra') {
                            def ec2_ip = powershell(returnStdout: true, script: '(terraform output -raw ec2_public_ip).Trim()').trim()
                            echo "EC2 Public IP: ${ec2_ip}"

                            // Ensure PEM key has correct permissions
                            bat """
                            icacls "%KEYFILE%" /inheritance:r
                            icacls "%KEYFILE%" /grant "SYSTEM:R"
                            icacls "%KEYFILE%" /grant "Administrators:R"
                            """

                            // Test SSH connection
                            bat 'cmd /c ssh -o StrictHostKeyChecking=no -i "%KEYFILE%" ec2-user@' + ec2_ip + ' "echo Connected successfully!"'

                            // Upload docker-compose.yml to EC2
                            bat 'cmd /c scp -o StrictHostKeyChecking=no -i "%KEYFILE%" ..\\docker-compose.yml ec2-user@' + ec2_ip + ':~/docker-compose.yml'

                            // Redeploy Docker containers
                            bat 'cmd /c ssh -o StrictHostKeyChecking=no -i "%KEYFILE%" ec2-user@' + ec2_ip + ' "docker-compose -f ~/docker-compose.yml pull && docker-compose -f ~/docker-compose.yml up -d --force-recreate"'

                            // Confirm containers
                            bat 'cmd /c ssh -o StrictHostKeyChecking=no -i "%KEYFILE%" ec2-user@' + ec2_ip + ' "docker ps"'
                        }
                    }
                }
            }
        }
    }
}
